@page "/"
@inject IJSRuntime js

<PageTitle>Home</PageTitle>


<div class="container">
    <div class="row">
        <div class="card">
            <div class="card-header">
                <button @onclick="ShowDialog" class="btn btn-primary float-end">Add Product</button>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>ID</th>
                        <th>NAME</th>
                        <th>AMOUNT</th>
                        <th>ACTIONS</th>
                    </tr>
                    </thead>
                    <tbody>
                        @if (Products.Any())
                        {
                            foreach (var product in Products)
                            {
                                <tr>
                                    <td>@product.Id</td>
                                    <td>@product.Name</td>
                                    <td>@product.Amount</td>
                                    <td>
                                        <div class="hstack gap2">
                                            <a class="btn btn-none btn-sm fw-bold text-info" @onclick="()=>EditProductClicked(product)">Edit</a>
                                            <a class="btn btn-none btn-sm fw-bold text-info" @onclick="()=>DeleteProductClicked(product)">Delete</a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<DialogComponent HandleAddProductEvent="HandleAddProductEvent"
                 Product="Product" 
                 @ref="dialogComponent"
                 HandleConfirmDeleteEvent="HandleConfirmDeleteEvent">
    
</DialogComponent>

@code
{
    DialogComponent? dialogComponent;
    string Message;
    Product Product = new();

    private async Task ShowDialog()
    {
        await js.InvokeVoidAsync("MyDialogFunction");
        dialogComponent!.LoadDefault();
        //dialogComponent!.ClearProductContainer();
        //dialogComponent.ChangeTitle("Add");
        //Product = new();
    }
    
    // Add Product
    private void HandleAddProductEvent(Product inComingProduct)
    {
        // Update Product
        if (inComingProduct.Id > 0)
        {
            var product = Products.FirstOrDefault(_ => _.Id == inComingProduct.Id);
            if (product is null)
            {
                return;
            }

            Message = "Product Update";
            dialogComponent!.ClearProductContainer();
            Product = new();
            return;
        }
        
        // Add Product
        var checkProduct = Products.FirstOrDefault(_ => _.Name!.ToLower().Equals(inComingProduct.Name!.ToLower()));
        if (checkProduct is null)
        {
            inComingProduct.Id = Products.Count + 1;
            Products.Add(inComingProduct);
            dialogComponent!.ClearProductContainer();
            Product = new();
            Message = "Product Added";
            return;
        }

        Message = "Sorry product already added";
    }

    private static List<Product> Products = new();
    private async void EditProductClicked(Product inComingProduct)
    {
        // Change the form title to Update Product.
        dialogComponent!.ChangeTitle("Update");
        Product = inComingProduct;
        dialogComponent.LoadDefault();
        await ShowDialog();
    }

    // Delete Product
    private async void DeleteProductClicked(Product inComingProduct)
    {
        Product = inComingProduct;
        dialogComponent!.ShowConfirmDialog();
        await ShowDialog();
    }

    private void HandleConfirmDeleteEvent()
    {
        if (Product is null)
        {
            return;
        }

        Products.Remove(Product);
        dialogComponent!.ClearProductContainer();
        dialogComponent!.ShowConfirmDialog();
        Product = new();
    }
}
